Mode View Controller
Model - Интерфейс взаимодействия с данными в базе данных
View - Видимый для пользователя интерфейс (презентационная часть)
Controller - Логика взаимодействия интерфейса с данными через модель
Model <-> Model (Django)
View <-> Template (Django)
Controller <-> View (Django)

Документация к проекту
1. После инициализации проекта и установки django нужно прописать "django-admin startproject base ." что бы создать проект django в папке base
    в текущей дериктории
2. После чего его можно запустить командой python manage.py runserver, не забыть проверить выбор виртуальной среды а так же если в первом пункте ошибка
    то ввести дополнительно "pipenv shell"
3. В файле setting.py находятся настройки нашего приложения, так же там хранится список приложений которые содержит наш проет INSTALLED_APPS
    между общением клиент\сервер можно ставить middleware которые будут обрабатывать входные или выходные данные MIDDLEWARES
    ROOT_URLCONF="base.urls" - путь к модулю urls.py
    TEMPLATES - настройка шаблонов нашего приложения
    WSGI_APPLICATION='base.wsgi.application' - путь к модулю wsgi.py
4. WSGI.py - web server gateway interface - между клиентом и бэкэндом находится вебсервер, он нужен для взаимодействия клиента с бэкендом 
    (пример: APACHE, NGNX) wsgi - это интерфейс взаимодействия между веб-сервером и приложением python. ASGI.py - asynchronous server gateway interface
    asgi по умолчанию выключено, оно обеспечивает асинхронные запросы к разным приложениям в нашем проекте python
5. В файле urls.py мы настраиваем роутинг нашего приложения записывая пути в список urlpatterns
6. Для того что бы создать приложение мы должны находиться на одном уровне с файлом manage.py и прописать в терминале команду python manage.py startapp [имя_приложения]
7. Для запуска приложения нужно прописать в терминале python manage.py runserver
8. В файл admin.py в нашем приложении стоит добавлять настройки административной части для конкретного приложения, в данном случае shop
9. Файл apps.py содержит настройки конкретного приложения (shop)
10. Models.py - вэтом файле создаются модели для работы с базой данных
11. В файле tests.py создаеются тесты для тестирования функционала приложения
12. Views.py - стоит помнить что в djangо этот файл отвечает за взаимодействие интерфейса с данными
13. Нюанс - когда при запуске приложения мы видим в терминале красным что у нас есть (сколько то) непремененных миграций, это значит что в django
    по умолчанию есть приложения которые используют свои базы данных, и вот их мы еще не импортировали в наше приложение. Нам просто нужно выполнить
    команду python manage.py migrate
14. Для того что бы создать суперпользователя и получить доступ ко всем данным в нашей базе нужно прописать команду python manage.py createsuperuser
15. После работы в приложении shop нам надо его зарегистрировать в файле settings.py в папке base в списке INSTALLED_APPS
16. После того как мы создадим первые модели для базы данных нужно сделать для них миграцию, она делается коммандой python manage.py makemigrations
    после этой команды в папке migrations появится файл 0001. Ну я что бы применить миграции нужно прописать команду python manage.py migrate

